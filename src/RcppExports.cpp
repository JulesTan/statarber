// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calendar_contains
LogicalVector calendar_contains(const IntegerVector& calendar, const IntegerVector& date);
RcppExport SEXP _statarber_calendar_contains(SEXP calendarSEXP, SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type calendar(calendarSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(calendar_contains(calendar, date));
    return rcpp_result_gen;
END_RCPP
}
// calendar_gt
IntegerVector calendar_gt(const IntegerVector& calendar, const IntegerVector& date);
RcppExport SEXP _statarber_calendar_gt(SEXP calendarSEXP, SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type calendar(calendarSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(calendar_gt(calendar, date));
    return rcpp_result_gen;
END_RCPP
}
// calendar_gte
IntegerVector calendar_gte(const IntegerVector& calendar, const IntegerVector& date, int n);
RcppExport SEXP _statarber_calendar_gte(SEXP calendarSEXP, SEXP dateSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type calendar(calendarSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type date(dateSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calendar_gte(calendar, date, n));
    return rcpp_result_gen;
END_RCPP
}
// calendar_lte
IntegerVector calendar_lte(const IntegerVector& calendar, const IntegerVector& date, int n);
RcppExport SEXP _statarber_calendar_lte(SEXP calendarSEXP, SEXP dateSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type calendar(calendarSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type date(dateSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calendar_lte(calendar, date, n));
    return rcpp_result_gen;
END_RCPP
}
// calendar_lt
IntegerVector calendar_lt(const IntegerVector& calendar, const IntegerVector& date);
RcppExport SEXP _statarber_calendar_lt(SEXP calendarSEXP, SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type calendar(calendarSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(calendar_lt(calendar, date));
    return rcpp_result_gen;
END_RCPP
}
// unlock_environment
bool unlock_environment(Environment env);
RcppExport SEXP _statarber_unlock_environment(SEXP envSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type env(envSEXP);
    rcpp_result_gen = Rcpp::wrap(unlock_environment(env));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_statarber_calendar_contains", (DL_FUNC) &_statarber_calendar_contains, 2},
    {"_statarber_calendar_gt", (DL_FUNC) &_statarber_calendar_gt, 2},
    {"_statarber_calendar_gte", (DL_FUNC) &_statarber_calendar_gte, 3},
    {"_statarber_calendar_lte", (DL_FUNC) &_statarber_calendar_lte, 3},
    {"_statarber_calendar_lt", (DL_FUNC) &_statarber_calendar_lt, 2},
    {"_statarber_unlock_environment", (DL_FUNC) &_statarber_unlock_environment, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_statarber(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
